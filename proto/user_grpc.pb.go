// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: proto/user.proto

package user_role_git

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserRoleService_AddUser_FullMethodName       = "/proto.UserRoleService/AddUser"
	UserRoleService_EnableUser_FullMethodName    = "/proto.UserRoleService/EnableUser"
	UserRoleService_DisableUser_FullMethodName   = "/proto.UserRoleService/DisableUser"
	UserRoleService_UpdateRole_FullMethodName    = "/proto.UserRoleService/UpdateRole"
	UserRoleService_AssociateRole_FullMethodName = "/proto.UserRoleService/AssociateRole"
	UserRoleService_Remove_FullMethodName        = "/proto.UserRoleService/Remove"
	UserRoleService_AppendArray_FullMethodName   = "/proto.UserRoleService/AppendArray"
	UserRoleService_ListFeatures_FullMethodName  = "/proto.UserRoleService/ListFeatures"
)

// UserRoleServiceClient is the client API for UserRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRoleServiceClient interface {
	AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	EnableUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*EnableResponse, error)
	DisableUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*DisableResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	AssociateRole(ctx context.Context, in *AssociateRoleRequest, opts ...grpc.CallOption) (*AssociateRoleResponse, error)
	Remove(ctx context.Context, in *AssociateRoleRequest, opts ...grpc.CallOption) (*AssociateRoleResponse, error)
	AppendArray(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*AssociateRoleResponse, error)
	ListFeatures(ctx context.Context, in *Role, opts ...grpc.CallOption) (*UserResponse, error)
}

type userRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRoleServiceClient(cc grpc.ClientConnInterface) UserRoleServiceClient {
	return &userRoleServiceClient{cc}
}

func (c *userRoleServiceClient) AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserRoleService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) EnableUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*EnableResponse, error) {
	out := new(EnableResponse)
	err := c.cc.Invoke(ctx, UserRoleService_EnableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) DisableUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*DisableResponse, error) {
	out := new(DisableResponse)
	err := c.cc.Invoke(ctx, UserRoleService_DisableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, UserRoleService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) AssociateRole(ctx context.Context, in *AssociateRoleRequest, opts ...grpc.CallOption) (*AssociateRoleResponse, error) {
	out := new(AssociateRoleResponse)
	err := c.cc.Invoke(ctx, UserRoleService_AssociateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) Remove(ctx context.Context, in *AssociateRoleRequest, opts ...grpc.CallOption) (*AssociateRoleResponse, error) {
	out := new(AssociateRoleResponse)
	err := c.cc.Invoke(ctx, UserRoleService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) AppendArray(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*AssociateRoleResponse, error) {
	out := new(AssociateRoleResponse)
	err := c.cc.Invoke(ctx, UserRoleService_AppendArray_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) ListFeatures(ctx context.Context, in *Role, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserRoleService_ListFeatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRoleServiceServer is the server API for UserRoleService service.
// All implementations must embed UnimplementedUserRoleServiceServer
// for forward compatibility
type UserRoleServiceServer interface {
	AddUser(context.Context, *UserRequest) (*UserResponse, error)
	EnableUser(context.Context, *Name) (*EnableResponse, error)
	DisableUser(context.Context, *Name) (*DisableResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	AssociateRole(context.Context, *AssociateRoleRequest) (*AssociateRoleResponse, error)
	Remove(context.Context, *AssociateRoleRequest) (*AssociateRoleResponse, error)
	AppendArray(context.Context, *UpdateRoleRequest) (*AssociateRoleResponse, error)
	ListFeatures(context.Context, *Role) (*UserResponse, error)
	mustEmbedUnimplementedUserRoleServiceServer()
}

// UnimplementedUserRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRoleServiceServer struct {
}

func (UnimplementedUserRoleServiceServer) AddUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserRoleServiceServer) EnableUser(context.Context, *Name) (*EnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedUserRoleServiceServer) DisableUser(context.Context, *Name) (*DisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedUserRoleServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedUserRoleServiceServer) AssociateRole(context.Context, *AssociateRoleRequest) (*AssociateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateRole not implemented")
}
func (UnimplementedUserRoleServiceServer) Remove(context.Context, *AssociateRoleRequest) (*AssociateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedUserRoleServiceServer) AppendArray(context.Context, *UpdateRoleRequest) (*AssociateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendArray not implemented")
}
func (UnimplementedUserRoleServiceServer) ListFeatures(context.Context, *Role) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedUserRoleServiceServer) mustEmbedUnimplementedUserRoleServiceServer() {}

// UnsafeUserRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRoleServiceServer will
// result in compilation errors.
type UnsafeUserRoleServiceServer interface {
	mustEmbedUnimplementedUserRoleServiceServer()
}

func RegisterUserRoleServiceServer(s grpc.ServiceRegistrar, srv UserRoleServiceServer) {
	s.RegisterService(&UserRoleService_ServiceDesc, srv)
}

func _UserRoleService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).AddUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_EnableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).EnableUser(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_DisableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).DisableUser(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_AssociateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).AssociateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_AssociateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).AssociateRole(ctx, req.(*AssociateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).Remove(ctx, req.(*AssociateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_AppendArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).AppendArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_AppendArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).AppendArray(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_ListFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).ListFeatures(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoleService_ServiceDesc is the grpc.ServiceDesc for UserRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserRoleService",
	HandlerType: (*UserRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserRoleService_AddUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _UserRoleService_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _UserRoleService_DisableUser_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _UserRoleService_UpdateRole_Handler,
		},
		{
			MethodName: "AssociateRole",
			Handler:    _UserRoleService_AssociateRole_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _UserRoleService_Remove_Handler,
		},
		{
			MethodName: "AppendArray",
			Handler:    _UserRoleService_AppendArray_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _UserRoleService_ListFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
